// Generated by ts-to-zod
import Transaction from 'arweave/node/lib/transaction';
import { z } from 'zod';
import { ArSyncTxStatus } from './client/interfaces';

const podcastTagsSchema = z.object({
  subscribeUrl: z.string(),
  title: z.string(),
  id: z.string().optional(),
  description: z.string().optional(),
  author: z.string().optional(),
  summary: z.string().optional(),
  explicit: z.string().optional(),
  subtitle: z.string().optional(),
  language: z.string().optional(),
  creator: z.string().optional(),
  ownerName: z.string().optional(),
  ownerEmail: z.string().optional(),
  managingEditor: z.string().optional(),
  categories: z.array(z.string()).optional(),
  keywords: z.array(z.string()).optional(),
  episodesKeywords: z.array(z.string()).optional(),
  firstEpisodeDate: z.date().optional(),
  lastEpisodeDate: z.date().optional(),
  metadataBatch: z.number().optional(),
  lastBuildDate: z.date().optional(),
});

const episodeSchema = z.object({
  title: z.string(),
  publishedAt: z.date(),
  categories: z.array(z.string()).optional(),
  keywords: z.array(z.string()).optional(),
  subtitle: z.string().optional(),
  contentHtml: z.string().optional(),
  summary: z.string().optional(),
  guid: z.string().optional(),
  infoUrl: z.string().optional(),
  mediaUrl: z.string().optional(),
  mediaType: z.string().optional(),
  mediaLength: z.string().optional(),
  duration: z.string().optional(),
  imageUrl: z.string().optional(),
  imageTitle: z.string().optional(),
  explicit: z.string().optional(),
});

const podcastSchema = podcastTagsSchema.extend({
  lastMutatedAt: z.number().optional(),
  episodes: episodeSchema.array(),
  infoUrl: z.string().optional(),
  imageUrl: z.string().optional(),
  imageTitle: z.string().optional(),
  copyright: z.string().optional(),
});

const arSyncTxStatusSchema = z.nativeEnum(ArSyncTxStatus);

const dispatchResultSchema = z.object({
  id: z.string(),
  type: z.union([z.literal('BASE'), z.literal('BUNDLED')]).optional(),
});

const dispatchResultDTOSchema = dispatchResultSchema.extend({
  bundledIn: z.string().optional(),
});

const arSyncTxSchema = z.object({
  id: z.string(),
  subscribeUrl: z.string(),
  title: z.string().optional(),
  numEpisodes: z.number(),
  dispatchResult: z.union([dispatchResultSchema, dispatchResultDTOSchema]),
  resultObj: z.union([z.instanceof(Transaction), z.instanceof(Error)]),
  metadata: podcastSchema.partial(),
  status: arSyncTxStatusSchema,
});

// interface SchemaType {
//   metadataToSync: Partial<Podcast>[];
//   arSyncTxs: ArSyncTx[];
//   episodes: {
//     episodes: Episode[];
//     subscribeUrl: string;
//   }[];
//   subscriptions: Podcast[]
// }
export const dbSchema = z.object({
  metadataToSync: podcastSchema.partial().array(),
  arSyncTxs: arSyncTxSchema.array(),
  episodes: z.object({
    episodes: episodeSchema.array(),
    subscribeUrl: z.string(),
  }).array(),
  subscriptions: podcastSchema.array(),
});
